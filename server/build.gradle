apply plugin: 'scala'
apply plugin: 'application'

sourceCompatibility = 1.8
version = '1.0'
mainClassName = 'net.orionlab.sample.MainApp'

ext {
    scalaBinaryVersion = "2.11"
    scalaMinorVersion = "8"
    akkaVersion = "2.4.5"
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: 'com.google.protobuf', name: 'protobuf-lite', version: '3.0.0-beta-3'
    compile("org.scala-lang:scala-library:$scalaBinaryVersion.$scalaMinorVersion")
    compile("com.typesafe.akka:akka-actor_$scalaBinaryVersion:$akkaVersion")
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-classic:1.1.3'
}

// Task generates Protobuf classes that serialize/deserialize message from/to client
// Usage in command line: gradle genProto
task genProto << {
    ext {
        protocPath = "/usr/local/bin/protoc"
        clientProtoDir = projectDir.path + "/../client/Classes/ProtoMessages/"
        serverSrcDir = projectDir.path + "/src/main/java/"
        serverProtoDir = "$serverSrcDir/ProtoMessages/"
        protoSrcDir = projectDir.path + "/ProtoMessages"
        cleanDirs = [clientProtoDir, serverProtoDir]
    }
    cleanDirs.each {
        cleanDir ->
            println 'Cleaning ' + cleanDir
            delete cleanDir
    }
    println clientProtoDir
    println serverProtoDir
    if (!new File(clientProtoDir).exists()) {
        new File(clientProtoDir).mkdirs()
    }
    if (!new File(serverProtoDir).exists()) {
        new File(serverProtoDir).mkdirs()
    }
    FileTree protoFiles = fileTree(dir: protoSrcDir, include: '*.proto')
    protoFiles.forEach {
        protoFile ->
            println 'Generating protoFile ' + protoFile
            exec {
                executable = protocPath
                args = ["--cpp_out=$clientProtoDir", "--proto_path=$protoSrcDir", "$protoFile"]
            }
            exec {
                executable = protocPath
                args = ["--java_out=$serverSrcDir", "--proto_path=$protoSrcDir", "$protoFile"]
            }
    }
}

